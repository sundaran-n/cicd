name: Release Pipeline

on:
  workflow_dispatch:
    inputs:
      release:
        description: "Release Version"
        required: true
        type: string
      external_repo:
        description: "External Repository containing Kubernetes manifests"
        required: true
        type: string

jobs:
  read-inputs:
    runs-on: ubuntu-latest
    outputs:
      iteration: ${{ steps.extract.outputs.ITERATION }}
      imagetag: ${{ steps.extract.outputs.IMAGETAG }}
      db: ${{ steps.extract.outputs.DB }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Read Inputs from File
        id: extract
        run: |
          RELEASE_VERSION=${{ inputs.release }}
          FILE_PATH="release/${RELEASE_VERSION}/input.txt"

          if [ ! -f "$FILE_PATH" ]; then
            echo "File not found: $FILE_PATH"
            exit 1
          fi

          ITERATION=$(awk '/\[ITERATION\]/{getline; print}' $FILE_PATH | tr -d '[:space:]')
          IMAGETAG=$(awk '/\[IMAGETAG\]/ {flag=1; next} /\[DB\]/ {flag=0} flag' $FILE_PATH | tr '\n' ',' | sed 's/,$//')
          DB=$(awk '/\[DB\]/{getline; print}' $FILE_PATH | tr -d '[:space:]')

          echo "ITERATION=$ITERATION"
          echo "IMAGETAG=$IMAGETAG"
          echo "DB=$DB"

          echo "ITERATION=$ITERATION" >> $GITHUB_OUTPUT
          echo "IMAGETAG=$IMAGETAG" >> $GITHUB_OUTPUT
          echo "DB=$DB" >> $GITHUB_OUTPUT

  deploy:
    needs: read-inputs
    runs-on: ubuntu-latest
    permissions:
      id-token: write 
      contents: read 
    steps:
      - name: Checkout Repository (Current)
        uses: actions/checkout@v4

      - name: Checkout External Repository (with manifests)
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.external_repo }}  # Use the external repository input
          token: ${{ secrets.GITHUB_TOKEN }}
          path: external-repo  # Check out the external repository into a subdirectory named 'external-repo'

      - name: Request OIDC Token
        run: |
          echo "Fetching OIDC Token..."
          curl -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL"

      - name: Configure AWS Account
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::977186631846:role/GitHubActionsEKSRole
          aws-region: us-east-2

      - name: Update Kubeconfig
        run: aws eks update-kubeconfig --name stardust --region us-east-1

      - name: Replace Image Tags in Kubernetes Manifests (No Commit)
        run: |
          IFS=',' read -r -a IMAGES <<< "${{ needs.read-inputs.outputs.imagetag }}"

          for IMAGE in "${IMAGES[@]}"; do
            SERVICE=$(echo $IMAGE | cut -d'_' -f1)  # Extract service name (cas, catalog, eureka)
            TAG=$(echo $IMAGE | cut -d'_' -f2)      # Extract tag (v1, v2, etc.)

            YAML_FILE="external-repo/manifest/${SERVICE}.yaml"  # Update to reflect the new location

            if [ -f "$YAML_FILE" ]; then
              echo "Updating $YAML_FILE with image tag $TAG"
              sed -i "s|{{imagetag}}|${TAG}|g" "$YAML_FILE"
            else
              echo "Warning: YAML file not found for $SERVICE"
            fi
          done

      - name: Apply Kubernetes Manifests
        run: |
          IFS=',' read -r -a IMAGES <<< "${{ needs.read-inputs.outputs.imagetag }}"
          for IMAGE in "${IMAGES[@]}"; do
            SERVICE=$(echo $IMAGE | cut -d'_' -f1)
            YAML_FILE="external-repo/manifest/${SERVICE}.yaml"  # Update to reflect the new location
            if [ -f "$YAML_FILE" ]; then
              kubectl apply -f "$YAML_FILE"
            fi
          done
